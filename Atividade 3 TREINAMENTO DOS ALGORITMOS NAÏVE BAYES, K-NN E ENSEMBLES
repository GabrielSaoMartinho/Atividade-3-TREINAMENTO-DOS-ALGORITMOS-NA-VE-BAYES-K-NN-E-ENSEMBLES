import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

dados = pd.read_csv(r"C:\Users\gabri\OneDrive\Área de Trabalho\Dados_atividade_3.csv")

colunas_features = ['mcv', 'alkphos', 'sgpt', 'sgot', 'gammagt']
coluna_target = 'drinks'

X = dados[colunas_features]
y = dados[coluna_target]

erros_arvores_de_decisao = []
erros_naive_bayes = []
erros_knn = []
erros_ensemble = []

for c in range(5):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y)
    if c ==0:
        quantidade_drinks = y_train.value_counts()
        print(quantidade_drinks)
    arvore_de_decisao = DecisionTreeClassifier(
        max_depth=3,
        max_features=None,
        criterion='entropy',
        min_samples_leaf=1,
        min_samples_split=2
    )
    naive_bayes = GaussianNB()
    knn = KNeighborsClassifier()

    arvore_de_decisao.fit(X_train, y_train)
    naive_bayes.fit(X_train, y_train)
    knn.fit(X_train, y_train)

    erro_arvore = 1 - accuracy_score(y_test, arvore_de_decisao.predict(X_test))
    erro_naive_bayes = 1 - accuracy_score(y_test, naive_bayes.predict(X_test))
    erro_knn = 1 - accuracy_score(y_test, knn.predict(X_test))

    erros_arvores_de_decisao.append(erro_arvore)
    erros_naive_bayes.append(erro_naive_bayes)
    erros_knn.append(erro_knn)

    predicoes_individuais = pd.DataFrame({
        'Arvore de Decisão': arvore_de_decisao.predict(X_test),
        'Naive Bayes': naive_bayes.predict(X_test),
        'KNN': knn.predict(X_test)
    })

    ensemble_predicoes = predicoes_individuais.mode(axis=1)[0]

    erro_ensemble = 1 - accuracy_score(y_test, ensemble_predicoes)
    erros_ensemble.append(erro_ensemble)

    previsoes = ['menor ou igual a 5', 'maior que 5']

    plt.figure(figsize=(8, 6))
    sns.heatmap(confusion_matrix(y_test, arvore_de_decisao.predict(X_test)), annot=True, fmt='d', cmap='Blues', xticklabels=previsoes, yticklabels=previsoes)
    plt.title('Matriz de Confusão - Árvore de decisão')
    plt.xlabel('Predição')
    plt.ylabel('Real')
    plt.show()

    plt.figure(figsize=(8, 6))
    sns.heatmap(confusion_matrix(y_test, naive_bayes.predict(X_test)), annot=True, fmt='d', cmap='Reds', xticklabels=previsoes, yticklabels=previsoes)
    plt.title('Matriz de Confusão - Naive Bayes')
    plt.xlabel('Predição')
    plt.ylabel('Real')
    plt.show()

    plt.figure(figsize=(8, 6))
    sns.heatmap(confusion_matrix(y_test, knn.predict(X_test)), annot=True, fmt='d', cmap='Greens', xticklabels=previsoes, yticklabels=previsoes)
    plt.title('Matriz de Confusão - KNN')
    plt.xlabel('Predição')
    plt.ylabel('Real')
    plt.show()

    plt.figure(figsize=(8, 6))
    sns.heatmap(confusion_matrix(y_test, ensemble_predicoes), annot=True, fmt='d', cmap='Purples', xticklabels=previsoes, yticklabels=previsoes)
    plt.title('Matriz de Confusão - Ensemble')
    plt.xlabel('Predição')
    plt.ylabel('Real')
    plt.show()

print(f'erro_medio_arvore_de_decisão={erros_arvores_de_decisao}')
print(f'erro_medio_naive_bayes ={erros_naive_bayes}')
print(f'erro_medio_knn ={erros_knn}')
print(f'erro_medio_ensemble ={erros_ensemble}')

erro_medio_arvore_decisao = sum(erros_arvores_de_decisao) / len(erros_arvores_de_decisao)
erro_medio_naive_bayes = sum(erros_naive_bayes) / len(erros_naive_bayes)
erro_medio_knn = sum(erros_knn) / len(erros_knn)
erro_medio_ensemble = sum(erros_ensemble) / len(erros_ensemble)

print("Erro médio de Arvore de decisão:", erro_medio_arvore_decisao)
print("Erro médio de Naïve Bayes:", erro_medio_naive_bayes)
print("Erro médio de k-NN:", erro_medio_knn)
print("Erro médio do ensemble:", erro_medio_ensemble)

erros = [erros_arvores_de_decisao, erros_naive_bayes, erros_knn, erros_ensemble]
modelos = ['Árvore de decisão', 'Naive Bayes', 'KNN', 'Ensemble']
cores = ['blue', 'red', 'green', 'purple']  # Cores para cada modelo

plt.figure(figsize=(10, 6))
for c1, modelo in enumerate(modelos):
    plt.plot(range(1, len(erros[c1]) + 1), erros[c1], marker='o', label=modelo, color=cores[c1])
plt.xlabel('Teste')
plt.xticks(range(1, 6))  # Espaçar o eixo x a cada unidade
plt.ylabel('Erro')
plt.title('Erro por Modelo e Teste')
plt.legend()
plt.grid(True)
plt.show()
